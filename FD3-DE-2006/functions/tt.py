import numpy as np


bounds = [[0,1],[0,1],[0,1],[0,1],[0,1]]
dim = 5
fmax = 0
fmin = -1


def f(theta):
      T = 5
      m = 5
      n = 4
      R1 = np.array([[1.0000, 0.4615, 1.0000, 0.0000],
                     [0.9000, 0.0000, 0.4750, 0.3333],
                     [0.6333, 0.4231, 0.1750, 1.0000],
                     [0.1000, 0.8846, 0.9750, 0.7778],
                     [0.0000, 1.0000, 0.0000, 0.7778],
                     ])
      c1 = np.array([[0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05]
                     ]) * 2
      R2 = np.array([[0.9000, 0.0000, 0.5854, 0.4286],
                     [1.0000, 0.3704, 0.0000, 1.0000],
                     [0.6333, 0.2963, 0.1220, 0.2857],
                     [0.1000, 0.8889, 0.9756, 0.4286],
                     [0.0000, 1.0000, 1.0000, 0.0000]
                     ])
      c2 = np.array([0.16, 0.16, 0.16, 0.16, 0.16])
      R3 = np.array([[1.0000, 0.2903, 0.0000, 1.0000],
                     [0.7742, 0.0000, 0.5814, 0.6250],
                     [0.4194, 0.0968, 0.1628, 0.2500],
                     [0.2258, 0.6774, 0.9767, 0.7500],
                     [0.0000, 1.0000, 1.0000, 0.0000]
                     ])
      c3 = np.array([[0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03]
                     ]) * 2
      R4 = np.array([[0.8519, 0.0000, 0.2941, 0.6364],
                     [0.4444, 0.1000, 0.0000, 0.3636],
                     [0.1481, 0.6667, 0.5000, 1.0000],
                     [1.0000, 0.2667, 1.0000, 0.0000],
                     [0.0000, 1.0000, 0.4706, 0.4545]
                     ])
      c4 = np.array([[0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04]
                     ]) * 2
      R5 = np.array([[0.9770, 0.3333, 0.0000, 0.8824],
                     [1.0000, 0.2000, 0.0741, 1.0000],
                     [0.0000, 0.0000, 0.9506, 0.9882],
                     [0.1724, 1.0000, 0.9877, 0.0118],
                     [0.1379, 0.9889, 1.0000, 0.0000]
                     ])
      c5 = np.array([[0.05, 0.05, 0.05, 0.05],
                     [0.05, 0.05, 0.05, 0.05],
                     [0.05, 0.05, 0.05, 0.05],
                     [0.05, 0.05, 0.05, 0.05],
                     [0.05, 0.05, 0.05, 0.05]
                     ]) * 2
      lambda1 = 0.1
      lambda2 = 0.3
      lambda3 = 0.25
      lambda4 = 0.15
      lambda5 = 0.2

      RC = lambda1 * R1 + lambda2 * R2 + lambda3 * R3 + lambda4 * R4 + lambda5 * R5

      lambda1_ = (lambda1 + (1 - theta[0]) / np.sum(1 - theta)) / 2
      lambda2_ = (lambda2 + (1 - theta[1]) / np.sum(1 - theta)) / 2
      lambda3_ = (lambda3 + (1 - theta[2]) / np.sum(1 - theta)) / 2
      lambda4_ = (lambda4 + (1 - theta[3]) / np.sum(1 - theta)) / 2
      lambda5_ = (lambda5 + (1 - theta[4]) / np.sum(1 - theta)) / 2
      R1_ = theta[0] * R1 + (1 - theta[0]) * RC
      R2_ = theta[1] * R2 + (1 - theta[1]) * RC
      R3_ = theta[2] * R3 + (1 - theta[2]) * RC
      R4_ = theta[3] * R4 + (1 - theta[3]) * RC
      R5_ = theta[4] * R5 + (1 - theta[4]) * RC
      RC_ = lambda1_ * R1_ + lambda2_ * R2_ + lambda3_ * R3_ + lambda4_ * R4_ + lambda5_ * R5_
      y = np.sum(np.abs(R1_ - RC_) + np.abs(R2_ - RC_) + np.abs(R3_ - RC_) + np.abs(R4_ - RC_) + np.abs(R5_ - RC_)) / (
                    T * m * n) - 1

      g1 = np.zeros((m * n))
      g2 = np.zeros((m))
      g3 = np.zeros((m * n))
      g4 = np.zeros((m * n))
      g5 = np.zeros((m * n))

      g1 = np.abs(R1 - R1_) - c1
      g2 = np.sum(np.abs(R2 - R2_), axis=1) - c2
      g3 = np.abs(R3 - R3_) - c3
      g4 = np.abs(R4 - R4_) - c4
      g5 = np.abs(R5 - R5_) - c5

      return y, lambda1_,lambda2_,lambda3_,lambda4_,lambda5_,R1_,R2_,R3_,R4_,R5_,RC_, g1, g2, g3, g4, g5

if __name__ == "__main__":
      R1 = np.array([[1.0000, 0.4615, 1.0000, 0.0000],
                     [0.9000, 0.0000, 0.4750, 0.3333],
                     [0.6333, 0.4231, 0.1750, 1.0000],
                     [0.1000, 0.8846, 0.9750, 0.7778],
                     [0.0000, 1.0000, 0.0000, 0.7778],
                     ])

      R2 = np.array([[0.9000, 0.0000, 0.5854, 0.4286],
                     [1.0000, 0.3704, 0.0000, 1.0000],
                     [0.6333, 0.2963, 0.1220, 0.2857],
                     [0.1000, 0.8889, 0.9756, 0.4286],
                     [0.0000, 1.0000, 1.0000, 0.0000]
                     ])

      R3 = np.array([[1.0000, 0.2903, 0.0000, 1.0000],
                     [0.7742, 0.0000, 0.5814, 0.6250],
                     [0.4194, 0.0968, 0.1628, 0.2500],
                     [0.2258, 0.6774, 0.9767, 0.7500],
                     [0.0000, 1.0000, 1.0000, 0.0000]
                     ])

      R4 = np.array([[0.8519, 0.0000, 0.2941, 0.6364],
                     [0.4444, 0.1000, 0.0000, 0.3636],
                     [0.1481, 0.6667, 0.5000, 1.0000],
                     [1.0000, 0.2667, 1.0000, 0.0000],
                     [0.0000, 1.0000, 0.4706, 0.4545]
                     ])

      R5 = np.array([[0.9770, 0.3333, 0.0000, 0.8824],
                     [1.0000, 0.2000, 0.0741, 1.0000],
                     [0.0000, 0.0000, 0.9506, 0.9882],
                     [0.1724, 1.0000, 0.9877, 0.0118],
                     [0.1379, 0.9889, 1.0000, 0.0000]
                     ])

      theta = np.array([0.95125459, 0.80994916, 0.83945629, 0.88874518, 0.8307036])
      y, lambda1_, lambda2_, lambda3_, lambda4_, lambda5_, R1_, R2_, R3_, R4_, R5_, RC_, g1, g2, g3, g4, g5 = f(theta)
      _R1 = np.zeros((5, 4))
      _R2 = np.zeros((5, 4))
      _R3 = np.zeros((5, 4))
      _R4 = np.zeros((5, 4))
      _R5 = np.zeros((5, 4))
      indexes = R1 > R1_
      for i in range(5):
            for j in range(4):
                  if indexes[i][j]:
                        _R1[i][j] = R1_[i][j] + (R1[i][j] - R1_[i][j])*np.random.random()
                  else:
                        _R1[i][j] = R1[i][j] + (R1_[i][j] - R1[i][j]) * np.random.random()
      indexes = R2 > R2_
      for i in range(5):
            for j in range(4):
                  if indexes[i][j]:
                        _R2[i][j] = R2_[i][j] + (R2[i][j] - R2_[i][j]) * np.random.random()
                  else:
                        _R2[i][j] = R2[i][j] + (R2_[i][j] - R2[i][j]) * np.random.random()
      indexes = R3 > R3_
      for i in range(5):
            for j in range(4):
                  if indexes[i][j]:
                        _R3[i][j] = R3_[i][j] + (R3[i][j] - R3_[i][j]) * np.random.random()
                  else:
                        _R3[i][j] = R3[i][j] + (R3_[i][j] - R3[i][j]) * np.random.random()
      indexes = R4 > R4_
      for i in range(5):
            for j in range(4):
                  if indexes[i][j]:
                        _R4[i][j] = R4_[i][j] + (R4[i][j] - R4_[i][j]) * np.random.random()
                  else:
                        _R4[i][j] = R4[i][j] + (R4_[i][j] - R4[i][j]) * np.random.random()
      indexes = R5 > R5_
      for i in range(5):
            for j in range(4):
                  if indexes[i][j]:
                        _R5[i][j] = R5_[i][j] + (R5[i][j] - R5_[i][j]) * np.random.random()
                  else:
                        _R5[i][j] = R5[i][j] + (R5_[i][j] - R5[i][j]) * np.random.random()

      print(_R1)
      print(_R2)
      print(_R3)
      print(_R4)
      print(_R5)







