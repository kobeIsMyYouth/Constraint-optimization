import numpy as np
rd = np.random.RandomState(888)
R_1 = [
    [0.333,0.000,...],
    [0.000,...],
    []
]
R_2 = rd.uniform(0,1,(4,4))
R_3 = rd.uniform(0,1,(4,4))
print(R_1.round(3),R_2.round(3),R_3.round(3))
λ = np.array([0.3,0.3,0.4])
R_A = 0.3*R_1 + 0.3*R_2 + 0.4*R_3
print(R_A.round(3))

bounds = [(0,1),(0,1),(0,1)]
θ = [θ_1,θ_2,θ_3]
dim = 3

def f(θ):
    y = (abs(0.7 * R_1 * θ[0] + 0.7 * R_A * (1 - θ[0]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.4 * R_3 * θ[
        2] - 0.4 * R_A * (1 - θ[2])) + abs(
        0.7 * R_2 * θ[1] + 0.7 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[0] - 0.3 * R_A * (1 - θ[0]) - 0.4 * R_3 * θ[
            2] - 0.4 * R_A * (1 - θ[2])) + abs(
        0.6 * R_3 * θ[2] + 0.6 * R_A * (1 - θ[2]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[
            0] - 0.3 * R_A * (1 - θ[0]))) / 48 - 1
    return y, θ

def g(θ):
    z = (abs(R_1 - 0.3 * R_1 * θ[0] - 0.3 * R_A * (1 - θ[0]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.4 * R_3 *
             θ[2] - 0.4 * R_A * (1 - θ[2])) + abs(
        R_2 - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[0] - 0.3 * R_A * (1 - θ[0]) - 0.4 * R_3 * θ[
            2] - 0.4 * R_A * (1 - θ[2])) + abs(
        R_3 - 0.4 * R_3 * θ[2] - 0.4 * R_A * (1 - θ[2]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[
            0] - 0.3 * R_A * (1 - θ[0]))) / 48
    w1 = (abs(0.7 * R_1 * θ[0] + 0.7 * R_A * (1 - θ[0]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.4 * R_3 * θ[
        2] - 0.4 * R_A * (1 - θ[2])) + abs(
        0.7 * R_2 * θ[1] + 0.7 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[0] - 0.3 * R_A * (1 - θ[0]) - 0.4 * R_3 * θ[
            2] - 0.4 * R_A * (1 - θ[2])) + abs(
        0.6 * R_3 * θ[2] + 0.6 * R_A * (1 - θ[2]) - 0.3 * R_2 * θ[1] - 0.3 * R_A * (1 - θ[1]) - 0.3 * R_1 * θ[
            0] - 0.3 * R_A * (1 - θ[0]))) / 48 - 0.15
    w1 = max(w1,0)
    return z,w1,θ
