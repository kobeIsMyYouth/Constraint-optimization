import numpy as np


bounds = [[0,1],[0,1],[0,1],[0,1],[0,1]]
dim = 5
fmax = 0
fmin = -1
vmax = 100
y_opt = -1






def f(theta):
      T = 5
      m = 5
      n = 4
      R1 = np.array([[9.98298117e-01, 4.49480424e-01, 9.77009936e-01, 1.74839030e-01],
                        [8.99578400e-01, 4.95005631e-01, 4.72377018e-01, 3.44625827e-01],
                        [6.29300218e-01, 4.21926527e-01, 1.82717852e-01, 9.86685845e-01],
                        [1.00035035e-01, 8.83346861e-01, 9.75307356e-01, 7.76744832e-01],
                        [5.21414228e-01, 9.99943243e-01, 3.42533039e-01, 7.59320952e-01]])
      for i in range(4):
            if i == 3:
                  R1[::, i] = (R1[::, i] - np.min(R1[::, i])) / (np.max(R1[::, i]) - np.min(R1[::, i]))
            else:
                  R1[::, i] = (np.max(R1[::, i]) - R1[::, i]) / (np.max(R1[::, i]) - np.min(R1[::, i]))

      c1 = np.array([[0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05],
                     [0.03, 0.04, 0.02, 0.05]
                     ])*1
      R2 = np.array([[0.9060887,  0.1190726, 0.54615067, 0.45871348],
                  [0.9815315,  0.36462044, 0.389205, 0.97330157],
                  [0.59536487, 0.29449176, 0.13720226, 0.28934917],
                  [0.10526056, 0.87218498, 0.97575368, 0.42382968],
                  [0.48814,  0.99978629, 0.96839261, 0.2584695]])
      for i in range(4):
            if i == 3:
                  R2[::, i] = (R2[::, i] - np.min(R2[::, i])) / (np.max(R2[::, i]) - np.min(R2[::, i]))
            else:
                  R2[::, i] = (np.max(R2[::, i]) - R2[::, i]) / (np.max(R2[::, i]) - np.min(R2[::, i]))
      c2 = np.array([0.2, 0.2, 0.2, 0.2, 0.2])
      R3 = np.array([[0.9913035,  0.27621499, 0.3079218, 0.94924134],
                  [0.78508485, 0.1441045, 0.54997365, 0.62837842],
                  [0.4192558,  0.9850923, 0.18808117, 0.28994603],
                  [0.23329505, 0.67890598, 0.9769808,  0.73814009],
                  [0.252794, 0.99997219, 0.99839216,0.901325]])
      for i in range(4):
            if i == 3:
                  R3[::, i] = (R3[::, i] - np.min(R3[::, i])) / (np.max(R3[::, i]) - np.min(R3[::, i]))
            else:
                  R3[::, i] = (np.max(R3[::, i]) - R3[::, i]) / (np.max(R3[::, i]) - np.min(R3[::, i]))
      c3 = np.array([[0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03],
                     [0.03, 0.03, 0.03, 0.03]
                     ])*3
      R4 = np.array([[0.85543335, 0.1940458, 0.29600062 ,0.63770385],
                        [0.46229703 ,0.10104833 ,0.69696 , 0.39297059],
                        [0.16210532 ,0.66016552 ,0.49197016 ,0.99845628],
                        [0.96245741, 0.29407291, 0.9984837 , 0.130214],
                        [0.278613, 0.99989009, 0.49385964, 0.42106155]])
      for i in range(4):
            if i == 3:
                  R4[::, i] = (R4[::, i] - np.min(R4[::, i])) / (np.max(R4[::, i]) - np.min(R4[::, i]))
            else:
                  R4[::, i] = (np.max(R4[::, i]) - R4[::, i]) / (np.max(R4[::, i]) - np.min(R4[::, i]))
      c4 = np.array([[0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04],
                     [0.04, 0.04, 0.04, 0.04]
                     ])*2
      R5 = np.array([[0.97657507, 0.33141961, 0.4464247, 0.8507571 ],
                        [0.99218509, 0.19598025, 0.9147579, 0.96380647],
                        [0.2767959 ,0.2187658 ,0.89860247, 0.98802364],
                        [0.18711772 ,0.98332525 ,0.98738495, 0.4153253],
                        [0.13601108 ,0.99030152, 0.99256096, 0.2141257]])
      for i in range(4):
            if i == 3:
                  R5[::, i] = (R5[::, i] - np.min(R5[::, i])) / (np.max(R5[::, i]) - np.min(R5[::, i]))
            else:
                  R5[::, i] = (np.max(R5[::, i]) - R5[::, i]) / (np.max(R5[::, i]) - np.min(R5[::, i]))
      c5 = np.array([[0.05, 0.05, 0.05, 0.05],
            [0.05, 0.05, 0.05, 0.05],
            [0.05, 0.05, 0.05, 0.05],
            [0.05, 0.05, 0.05, 0.05],
            [0.05, 0.05, 0.05, 0.05]
            ])*2
      lambda1 = 0.1
      lambda2 = 0.3
      lambda3 = 0.25
      lambda4 = 0.15
      lambda5 = 0.2

      RC = lambda1 * R1 + lambda2 * R2 + lambda3 * R3 + lambda4 * R4 + lambda5 * R5

      lambda1_ = (lambda1 + (1 - theta[0]) / np.sum(1 - theta)) / 2
      lambda2_ = (lambda2 + (1 - theta[1]) / np.sum(1 - theta)) / 2
      lambda3_ = (lambda3 + (1 - theta[2]) / np.sum(1 - theta)) / 2
      lambda4_ = (lambda4 + (1 - theta[3]) / np.sum(1 - theta)) / 2
      lambda5_ = (lambda5 + (1 - theta[4]) / np.sum(1 - theta)) / 2
      R1_ = theta[0] * R1 + (1 - theta[0]) * RC
      R2_ = theta[1] * R2 + (1 - theta[1]) * RC
      R3_ = theta[2] * R3 + (1 - theta[2]) * RC
      R4_ = theta[3] * R4 + (1 - theta[3]) * RC
      R5_ = theta[4] * R5 + (1 - theta[4]) * RC
      RC_ = lambda1_ * R1_ + lambda2_ * R2_ + lambda3_ * R3_ + lambda4_ * R4_ + lambda5_ * R5_
      y = np.sum(np.abs(R1_ - RC_) + np.abs(R2_ - RC_) + np.abs(R3_ - RC_) + np.abs(R4_ - RC_) + np.abs(R5_ - RC_)) / (T * m * n) - 1

      g1 = np.zeros((m*n))
      g2 = np.zeros((m))
      g3 = np.zeros((m * n))
      g4 = np.zeros((m * n))
      g5 = np.zeros((m * n))

      g1 = np.abs(R1 - R1_) - c1
      g2 = np.sum(np.abs(R2 - R2_),axis=1) - c2
      g3 = np.abs(R3 - R3_) - c3
      g4 = np.abs(R4 - R4_) - c4
      g5 = np.abs(R5 - R5_) - c5

      return y, g1, g2, g3, g4, g5

if __name__ == "__main__":
      # theta = np.array([0.9,0.9,0.7,0.5,0.8])
      # print(f(theta))
      R1 = np.array([[9.98298117e-01, 4.49480424e-01, 9.77009936e-01, 1.74839030e-02],
                     [8.99578400e-01, 4.95005631e-03, 4.72377018e-01, 3.44625827e-01],
                     [6.29300218e-01, 4.21926527e-01, 1.82717852e-01, 9.86685845e-01],
                     [1.00035035e-01, 8.83346861e-01, 9.75307356e-01, 7.76744832e-01],
                     [5.21414228e-04, 9.99943243e-01, 3.42533039e-02, 7.59320952e-01]])
      for i in range(4):
            if i == 3:
                  R1[::, i] = (R1[::, i] - np.min(R1[::, i])) / (np.max(R1[::, i]) - np.min(R1[::, i]))
            else:
                  R1[::, i] = (np.max(R1[::, i]) - R1[::, i]) / (np.max(R1[::, i]) - np.min(R1[::, i]))

      print(R1)



